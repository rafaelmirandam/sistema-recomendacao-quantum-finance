"""
Sistema de Recomenda√ß√£o Quantum Finance - Prova de Conceito (PoC)
Disciplina: Sistemas de Recomenda√ß√£o - FIAP
Professor: Jos√© Luiz Maturana Pagnossim
Data: Setembro 2025

Este c√≥digo representa uma prova de conceito simplificada de um sistema de recomenda√ß√£o
para a fintech Quantum Finance. N√ÉO se trata de um sistema de produ√ß√£o, mas sim de uma
demonstra√ß√£o educacional dos conceitos de filtro colaborativo.
"""

import math
from typing import Dict, List, Tuple

# 1. DATASET SIMULADO
# Base de dados simulada representando clientes da Quantum Finance e seus produtos contratados
# Produtos: Conta Corrente (CC), Cart√£o de Cr√©dito (CartaoCredito), Investimentos (Investimento),
# Seguro (Seguro), Empr√©stimo (Emprestimo), Financiamento (Financiamento)

clientes_produtos = {
    "Ana": {
        "CC": 1,                # Possui conta corrente
        "CartaoCredito": 0,     # N√£o possui cart√£o de cr√©dito
        "Investimento": 1,      # Possui investimentos
        "Seguro": 0,           # N√£o possui seguro
        "Emprestimo": 0,       # N√£o possui empr√©stimo
        "Financiamento": 0     # N√£o possui financiamento
    },
    "Bruno": {
        "CC": 1,
        "CartaoCredito": 1,     # Possui cart√£o de cr√©dito
        "Investimento": 1,
        "Seguro": 1,           # Possui seguro
        "Emprestimo": 0,
        "Financiamento": 0
    },
    "Carlos": {
        "CC": 1,
        "CartaoCredito": 1,
        "Investimento": 0,
        "Seguro": 0,
        "Emprestimo": 1,       # Possui empr√©stimo
        "Financiamento": 0
    },
    "Diana": {
        "CC": 1,
        "CartaoCredito": 0,
        "Investimento": 1,
        "Seguro": 1,
        "Emprestimo": 0,
        "Financiamento": 1     # Possui financiamento
    },
    "Eduardo": {
        "CC": 1,
        "CartaoCredito": 1,
        "Investimento": 1,
        "Seguro": 0,
        "Emprestimo": 0,
        "Financiamento": 0
    },
    "Fernanda": {
        "CC": 1,
        "CartaoCredito": 1,
        "Investimento": 0,
        "Seguro": 1,
        "Emprestimo": 1,
        "Financiamento": 0
    }
}

# Informa√ß√µes dos produtos para exibi√ß√£o mais rica das recomenda√ß√µes
produtos_info = {
    "CartaoCredito": {
        "nome": "Cart√£o Quantum Finance Premium",
        "descricao": "Cart√£o de cr√©dito com cashback e anuidade gr√°tis no primeiro ano",
        "beneficios": ["Cashback de 2%", "Anuidade gr√°tis 1¬∫ ano", "Limite pr√©-aprovado"]
    },
    "Investimento": {
        "nome": "Quantum Finance Investimentos",
        "descricao": "Plataforma completa de investimentos com taxa zero",
        "beneficios": ["Taxa zero", "Assessoria gratuita", "Diversifica√ß√£o autom√°tica"]
    },
    "Seguro": {
        "nome": "Seguro Quantum Finance Vida",
        "descricao": "Prote√ß√£o completa para voc√™ e sua fam√≠lia",
        "beneficios": ["Cobertura ampla", "Assist√™ncia 24h", "Pre√ßo competitivo"]
    },
    "Emprestimo": {
        "nome": "Empr√©stimo Quantum Finance",
        "descricao": "Cr√©dito r√°pido com juros baixos",
        "beneficios": ["Juros baixos", "Aprova√ß√£o r√°pida", "Sem burocracia"]
    },
    "Financiamento": {
        "nome": "Financiamento Quantum Finance",
        "descricao": "Realize seus sonhos com nosso financiamento",
        "beneficios": ["Parcelas fixas", "Prazo longo", "Taxa competitiva"]
    }
}

def calcular_distancia_euclidiana(cliente1: Dict[str, int], cliente2: Dict[str, int]) -> float:
    """
    Calcula a dist√¢ncia euclidiana entre dois clientes com base nos produtos que possuem.
    
    A dist√¢ncia euclidiana √© uma medida de similaridade onde valores menores indicam
    maior similaridade entre os usu√°rios. √â calculada como a raiz quadrada da soma
    dos quadrados das diferen√ßas entre as caracter√≠sticas de cada usu√°rio.
    
    Args:
        cliente1: Dicion√°rio com produtos do primeiro cliente (0 ou 1)
        cliente2: Dicion√°rio com produtos do segundo cliente (0 ou 1)
        
    Returns:
        float: Dist√¢ncia euclidiana entre os dois clientes
    """
    
    # Soma dos quadrados das diferen√ßas para cada produto
    soma_quadrados = 0
    
    # Itera sobre todos os produtos dispon√≠veis
    for produto in cliente1.keys():
        diferenca = cliente1[produto] - cliente2[produto]
        soma_quadrados += diferenca ** 2
    
    # Retorna a raiz quadrada da soma dos quadrados (dist√¢ncia euclidiana)
    distancia = math.sqrt(soma_quadrados)
    
    return distancia

def encontrar_usuarios_similares(usuario_alvo: str, base_clientes: Dict[str, Dict[str, int]]) -> List[Tuple[str, float]]:
    """
    Encontra todos os usu√°rios similares ao usu√°rio alvo, ordenados por similaridade.
    
    Esta fun√ß√£o implementa a parte central do filtro colaborativo: identificar usu√°rios
    com perfis similares com base nos produtos que possuem.
    
    Args:
        usuario_alvo: Nome do cliente para o qual queremos encontrar similares
        base_clientes: Base completa de clientes e seus produtos
        
    Returns:
        List[Tuple[str, float]]: Lista de tuplas (nome_cliente, distancia) ordenada por similaridade
    """
    
    # Verifica se o usu√°rio alvo existe na base
    if usuario_alvo not in base_clientes:
        print(f"Erro: Usu√°rio '{usuario_alvo}' n√£o encontrado na base de dados.")
        return []
    
    # Lista para armazenar as similaridades
    similaridades = []
    
    # Perfil do usu√°rio alvo
    perfil_alvo = base_clientes[usuario_alvo]
    
    # Calcula a dist√¢ncia para todos os outros usu√°rios
    for cliente, perfil in base_clientes.items():
        if cliente != usuario_alvo:  # N√£o compara o usu√°rio consigo mesmo
            distancia = calcular_distancia_euclidiana(perfil_alvo, perfil)
            similaridades.append((cliente, distancia))
    
    # Ordena por dist√¢ncia (menor dist√¢ncia = maior similaridade)
    similaridades.sort(key=lambda x: x[1])
    
    return similaridades

def recomendar_produto(usuario_alvo: str, base_clientes: Dict[str, Dict[str, int]]) -> Dict:
    """
    Fun√ß√£o principal de recomenda√ß√£o que implementa a l√≥gica do filtro colaborativo.
    
    Esta fun√ß√£o encontra o usu√°rio mais similar ao usu√°rio alvo e recomenda um produto
    que o usu√°rio similar possui, mas o usu√°rio alvo ainda n√£o possui.
    
    Args:
        usuario_alvo: Nome do cliente para quem fazer a recomenda√ß√£o
        base_clientes: Base completa de clientes e seus produtos
        
    Returns:
        Dict: Dicion√°rio com informa√ß√µes da recomenda√ß√£o ou mensagem de erro
    """
    
    print(f"\n{'='*60}")
    print(f"SISTEMA DE RECOMENDA√á√ÉO QUANTUM FINANCE")
    print(f"Gerando recomenda√ß√£o para: {usuario_alvo}")
    print(f"{'='*60}")
    
    # Verifica se o usu√°rio existe na base
    if usuario_alvo not in base_clientes:
        return {
            "erro": f"Usu√°rio '{usuario_alvo}' n√£o encontrado na base de dados.",
            "sucesso": False
        }
    
    # 1. Exibe o perfil atual do usu√°rio alvo
    perfil_alvo = base_clientes[usuario_alvo]
    print(f"\nüìä PERFIL ATUAL DE {usuario_alvo.upper()}:")
    produtos_possui = [produto for produto, tem in perfil_alvo.items() if tem == 1]
    produtos_nao_possui = [produto for produto, tem in perfil_alvo.items() if tem == 0]
    
    print(f"   ‚úÖ Produtos que possui: {', '.join(produtos_possui)}")
    print(f"   ‚ùå Produtos que n√£o possui: {', '.join(produtos_nao_possui)}")
    
    # 2. Encontra usu√°rios similares
    print(f"\nüîç ANALISANDO USU√ÅRIOS SIMILARES:")
    usuarios_similares = encontrar_usuarios_similares(usuario_alvo, base_clientes)
    
    # Exibe os 3 usu√°rios mais similares para demonstra√ß√£o
    print("   Top 3 usu√°rios mais similares:")
    for i, (cliente, distancia) in enumerate(usuarios_similares[:3]):
        similaridade_percentual = max(0, (1 - distancia/10) * 100)  # Convers√£o para percentual
        print(f"   {i+1}. {cliente} (similaridade: {similaridade_percentual:.1f}%)")
    
    # 3. Busca recomenda√ß√£o com base no usu√°rio mais similar
    if not usuarios_similares:
        return {
            "erro": "N√£o foi poss√≠vel encontrar usu√°rios similares.",
            "sucesso": False
        }
    
    # Usu√°rio mais similar (primeira posi√ß√£o na lista ordenada)
    usuario_mais_similar, distancia = usuarios_similares[0]
    perfil_similar = base_clientes[usuario_mais_similar]
    
    print(f"\nüë• USU√ÅRIO MAIS SIMILAR: {usuario_mais_similar}")
    produtos_similar = [produto for produto, tem in perfil_similar.items() if tem == 1]
    print(f"   Produtos que {usuario_mais_similar} possui: {', '.join(produtos_similar)}")
    
    # 4. Identifica produtos para recomendar
    # Produtos que o usu√°rio similar possui, mas o usu√°rio alvo n√£o possui
    produtos_para_recomendar = []
    for produto, tem_produto in perfil_similar.items():
        if tem_produto == 1 and perfil_alvo[produto] == 0:
            produtos_para_recomendar.append(produto)
    
    # 5. Retorna a recomenda√ß√£o
    if not produtos_para_recomendar:
        return {
            "erro": f"N√£o h√° produtos para recomendar. {usuario_alvo} j√° possui todos os produtos que {usuario_mais_similar} possui.",
            "sucesso": False,
            "usuario_similar": usuario_mais_similar,
            "distancia": distancia
        }
    
    # Seleciona o primeiro produto da lista (em um sistema real, seria mais sofisticado)
    produto_recomendado = produtos_para_recomendar[0]
    info_produto = produtos_info.get(produto_recomendado, {})
    
    print(f"\nüéØ RECOMENDA√á√ÉO GERADA:")
    print(f"   Produto: {info_produto.get('nome', produto_recomendado)}")
    print(f"   Motivo: Usu√°rios similares a voc√™ tamb√©m contrataram este produto")
    print(f"   Baseado em: Perfil de {usuario_mais_similar}")
    
    return {
        "sucesso": True,
        "produto_recomendado": produto_recomendado,
        "nome_produto": info_produto.get('nome', produto_recomendado),
        "descricao": info_produto.get('descricao', ''),
        "beneficios": info_produto.get('beneficios', []),
        "usuario_similar": usuario_mais_similar,
        "distancia": distancia,
        "motivo": f"Baseado no perfil de {usuario_mais_similar}, que possui caracter√≠sticas similares √†s suas",
        "todos_produtos_similares": produtos_para_recomendar
    }

def exibir_recomendacao_detalhada(resultado_recomendacao: Dict):
    """
    Exibe a recomenda√ß√£o de forma detalhada e amig√°vel ao usu√°rio.
    
    Args:
        resultado_recomendacao: Resultado retornado pela fun√ß√£o recomendar_produto
    """
    
    if not resultado_recomendacao["sucesso"]:
        print(f"\n‚ùå {resultado_recomendacao['erro']}")
        return
    
    print(f"\n{'='*60}")
    print(f"‚ú® RECOMENDA√á√ÉO PERSONALIZADA QUANTUM FINANCE")
    print(f"{'='*60}")
    
    print(f"\nüèÜ PRODUTO RECOMENDADO:")
    print(f"   {resultado_recomendacao['nome_produto']}")
    print(f"   {resultado_recomendacao['descricao']}")
    
    if resultado_recomendacao['beneficios']:
        print(f"\nüíé PRINCIPAIS BENEF√çCIOS:")
        for beneficio in resultado_recomendacao['beneficios']:
            print(f"   ‚Ä¢ {beneficio}")
    
    print(f"\nüß† POR QUE ESTA RECOMENDA√á√ÉO?")
    print(f"   {resultado_recomendacao['motivo']}")
    
    similaridade_percentual = max(0, (1 - resultado_recomendacao['distancia']/10) * 100)
    print(f"   N√≠vel de compatibilidade: {similaridade_percentual:.1f}%")
    
    if len(resultado_recomendacao['todos_produtos_similares']) > 1:
        outros_produtos = resultado_recomendacao['todos_produtos_similares'][1:]
        print(f"\nüìã OUTROS PRODUTOS QUE PODEM INTERESSAR:")
        for produto in outros_produtos:
            nome_produto = produtos_info.get(produto, {}).get('nome', produto)
            print(f"   ‚Ä¢ {nome_produto}")

# EXEMPLO DE EXECU√á√ÉO E DEMONSTRA√á√ÉO
if __name__ == "__main__":
    """
    Se√ß√£o de demonstra√ß√£o do sistema de recomenda√ß√£o.
    Aqui executamos exemplos pr√°ticos para mostrar como o sistema funciona.
    """
    
    print("üöÄ INICIANDO DEMONSTRA√á√ÉO DO SISTEMA DE RECOMENDA√á√ÉO QUANTUM FINANCE")
    print("Este √© um sistema educacional - N√ÉO √© um sistema de produ√ß√£o")
    
    # Exemplo 1: Recomenda√ß√£o para Ana
    print("\n" + "="*80)
    print("EXEMPLO 1: RECOMENDA√á√ÉO PARA ANA")
    print("="*80)
    
    resultado_ana = recomendar_produto("Ana", clientes_produtos)
    exibir_recomendacao_detalhada(resultado_ana)
    
    # Exemplo 2: Recomenda√ß√£o para Carlos
    print("\n" + "="*80)
    print("EXEMPLO 2: RECOMENDA√á√ÉO PARA CARLOS")
    print("="*80)
    
    resultado_carlos = recomendar_produto("Carlos", clientes_produtos)
    exibir_recomendacao_detalhada(resultado_carlos)
    
    # Exemplo 3: Tentativa de recomenda√ß√£o para usu√°rio inexistente
    print("\n" + "="*80)
    print("EXEMPLO 3: TRATAMENTO DE ERRO - USU√ÅRIO INEXISTENTE")
    print("="*80)
    
    resultado_erro = recomendar_produto("Jo√£o", clientes_produtos)
    exibir_recomendacao_detalhada(resultado_erro)
    
    # Exemplo 4: An√°lise geral da base
    print("\n" + "="*80)
    print("EXEMPLO 4: AN√ÅLISE GERAL DA BASE DE CLIENTES")
    print("="*80)
    
    print("\nüìä RESUMO DA BASE DE CLIENTES:")
    for cliente, produtos in clientes_produtos.items():
        total_produtos = sum(produtos.values())
        produtos_lista = [prod for prod, tem in produtos.items() if tem == 1]
        print(f"   {cliente}: {total_produtos} produtos ({', '.join(produtos_lista)})")
    
    print(f"\nüìà ESTAT√çSTICAS:")
    print(f"   Total de clientes: {len(clientes_produtos)}")
    print(f"   Total de produtos dispon√≠veis: {len(list(clientes_produtos.values())[0])}")
    
    # Produto mais popular
    produtos_count = {}
    for cliente_produtos_dict in clientes_produtos.values():
        for produto, tem in cliente_produtos_dict.items():
            if tem == 1:
                produtos_count[produto] = produtos_count.get(produto, 0) + 1
    
    produto_mais_popular = max(produtos_count.items(), key=lambda x: x[1])
    print(f"   Produto mais popular: {produto_mais_popular[0]} ({produto_mais_popular[1]} clientes)")
    
    print(f"\n‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("Este sistema demonstra os conceitos b√°sicos de filtro colaborativo.")
    print("Em um ambiente de produ√ß√£o, seria necess√°rio implementar:")
    print("‚Ä¢ Algoritmos mais sofisticados (matrix factorization, deep learning)")
    print("‚Ä¢ Tratamento de dados em larga escala")
    print("‚Ä¢ Avalia√ß√£o de qualidade das recomenda√ß√µes")
    print("‚Ä¢ Integra√ß√£o com sistemas de produ√ß√£o")
    print("‚Ä¢ Tratamento de cold start problem")
    print("‚Ä¢ Explicabilidade das recomenda√ß√µes")
